# -*- coding: utf-8 -*-
import math
import pandas as pd
import numpy as np
import pandas.core.frame
from typing import List
from texttable import Texttable
import matplotlib.pyplot as plt

печать = print
параметры = dir
длина = len
отсортированый = sorted
строка = str
сумма = sum
интервал = range
модуль = abs
округлить = round
корень = math.sqrt
массив = List
набор_массивов_строк = массив[массив[строка]]
Текстовая_таблица = Texttable


def развернуть(массив, числа=False):
    группы = [f'{элемент[0]}, {элемент[1]}' if числа else str(элемент[0]) for элемент in массив]
    количество = [элемент[1] for элемент in массив]
    return группы, количество


def анализ(дата,
           первый_признак: строка, деление_первого_признака: набор_массивов_строк,
           второй_признак: строка, деление_второго_признака: набор_массивов_строк,
           имена_групп: набор_массивов_строк, подстроки=False):
    сгруппировано = дата.groupby([первый_признак, второй_признак])['N'].count()
    # печать(сгруппировано)
    таблица = np.array([
        [0, 0],
        [0, 0]
    ])

    for деление_по_первому in интервал(2):
        for признак_1 in деление_первого_признака[деление_по_первому]:
            список_1 = сгруппировано[признак_1]
            for деление_по_второму in интервал(2):
                for признак_2 in деление_второго_признака[деление_по_второму]:
                    if подстроки:
                        for ответ, количество in список_1.items():
                            if признак_2 in ответ:
                                таблица[деление_по_первому][деление_по_второму] += количество
                    else:
                        if признак_2 in список_1:
                            таблица[деление_по_первому][деление_по_второму] += список_1[признак_2]
    a = таблица[0][0]
    b = таблица[0][1]
    c = таблица[1][0]
    d = таблица[1][1]

    количество_по_признакам = Текстовая_таблица()
    количество_по_признакам.header(['Значения признаков', имена_групп[1][0], имена_групп[1][1], 'Сумма'])
    количество_по_признакам.add_row([имена_групп[0][0], таблица[0][0], таблица[0][1], таблица[0].sum()])
    количество_по_признакам.add_row([имена_групп[0][1], таблица[1][0], таблица[1][1], таблица[1].sum()])
    количество_по_признакам.add_row(['Сумма', np.sum(таблица, axis=0)[0], np.sum(таблица, axis=0)[1], таблица.sum()])
    печать(количество_по_признакам.draw())

    # таблица_вероятности = таблица / таблица.sum()
    # вероятность_по_признакам = Текстовая_таблица()
    # вероятность_по_признакам.header(['Значения признаков', имена_групп[1][0], имена_групп[1][1], 'Всего'])
    # вероятность_по_признакам.add_row([имена_групп[0][0], таблица_вероятности[0][0], таблица_вероятности[0][1], таблица_вероятности[0].sum()])
    # вероятность_по_признакам.add_row([имена_групп[0][1], таблица_вероятности[1][0], таблица_вероятности[1][1], таблица_вероятности[1].sum()])
    # вероятность_по_признакам.add_row(['Всего', np.sum(таблица_вероятности, axis=0)[0], np.sum(таблица_вероятности, axis=0)[1], таблица_вероятности.sum()])
    # печать(вероятность_по_признакам.draw())

    печать('a', a)
    печать('b', b)
    печать('c', c)
    печать('d', d)

    печать('Коэффициент ассоциации')
    C_a = 1.96
    Q = (a * d - b * c) / (a * d + b * c)
    D_Q = 1 / 4 * (1 - Q ** 2) ** 2 * (1 / a + 1 / b + 1 / c + 1 / d)
    Q = модуль(Q)
    # печать(a * d - b * c, a * d + b * c, Q)
    # печать((1 - Q ** 2) ** 2, 1 / a, 1 / b, 1 / c, 1 / d, 1 / a + 1 / b + 1 / c + 1 / d)
    # печать(D_Q)
    печать(округлить(Q, 4), округлить(C_a * корень(D_Q), 4))
    печать('Независимы' if Q <= C_a * корень(D_Q) else 'Зависимы')
    печать()

    печать('Коэффициент коллигации')
    Y = (корень(a * d) - корень(b * c)) / (корень(a * d) + корень(b * c))
    D_Y = 1 / 16 * (1 - Y ** 2) ** 2 * (1 / a + 1 / b + 1 / c + 1 / d)
    Y = модуль(Y)
    # печать((корень(a * d) - корень(b * c)), (корень(a * d) + корень(b * c)), Y)
    # печать((1 - Y ** 2) ** 2, D_Y)
    печать('Проверка расхождения с Q', abs(Q / (2 * Y / (1 + Y ** 2)) - 1))
    печать(округлить(Y, 4), округлить(C_a * корень(D_Y), 4))
    печать('Независимы' if Y <= C_a * корень(D_Y) else 'Зависимы')

    печать()

    печать('Коэффициент контингенции')
    V = (a * d - b * c) / корень((a + b) * (a + c) * (b + d) * (c + d))
    n = таблица.sum()
    D_V = \
        1 / n * (1 - V ** 2) + \
        1 / n * (V + 0.5 * V ** 2) * (((a - d) ** 2 - (b - c) ** 2) / корень((a + b) * (a + c) * (b + d) * (c + d))) - \
        0.75 / n * V ** 2 * ((((a + b - c - d) ** 2) / ((a + b) * (c + d))) - (((a + c - b - d) ** 2) / ((a + c) * (b + d))))
    # печать((a * d - b * c), (a + b) * (a + c) * (b + d) * (c + d), корень((a + b) * (a + c) * (b + d) * (c + d)), V)
    # печать(V**2, (V + 0.5 * V ** 2), ((a - d) ** 2 - (b - c) ** 2))
    # печать(((a + b - c - d) ** 2), ((a + b) * (c + d)), ((a + c - b - d) ** 2), ((a + c) * (b + d)))
    # печать(1 / n * (1 - V ** 2), 1 / n * (V + 0.5 * V ** 2) * (((a - d) ** 2 - (b - c) ** 2) / корень((a + b) * (a + c) * (b + d) * (c + d))),
    #        0.75 / n * V ** 2 * ((((a + b - c - d) ** 2) / ((a + b) * (c + d))) - (((a + c - b - d) ** 2) / ((a + c) * (b + d)))))
    печать(D_V)
    V = модуль(V)
    печать(округлить(V, 4), округлить(C_a * корень(D_V), 4))
    печать('Независимы' if V <= C_a * корень(D_V) else 'Зависимы')

    печать()


def main():
    дата: pandas.DataFrame = pd.read_csv('data1.csv')

    факультеты = [(имя, длина(строки)) for имя, строки in дата.groupby('факультет').groups.items()]
    группы, количество_на_факультете = развернуть(отсортированый(факультеты, key=lambda факультет: факультет[1], reverse=False), True)

    # plt.barh(группы, количество_на_факультете)
    # plt.show()

    # соцсети,видео,игры,фото видео,списывание,чтение,
    # частота покупок,экран,камера,автономность,производительность,бренд

    печать(дата.groupby(['игры', 'списывание'])['N'].count())

    анализ(
        дата,
        'игры', [['Не играю', 'Менее 3 часов в неделю'], ['3 - 6 часов в неделю', 'Практически ежедневно, я зависим от игр', 'Практически ежедневно, я киберспортсмен']],
        'списывание', [['Нет', 'Иногда'], ['Почти всегда списываю с телефона', 'Только благодаря телефону сдаю кр / зачёты / экзамены']],
        [['До 3 часов в неделю', 'Более 3 часов в неделю'], ['Не списываю / списываю иногда', 'Списываю часто']]
    )


if __name__ == '__main__':
    main()
